@page "/login"
@using System.ComponentModel.DataAnnotations
@using LRFrontend.Models
@inject NavigationManager Navigation

<h3 class="text-center my-4">üîê Login</h3>

<div class="row justify-content-center">
    <div class="col-md-5">
        <div class="card shadow rounded-4 p-4 card-hover-effect">
            <EditForm Model="loginClass" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-envelope-fill"></i></span>
                        <InputText id="email" class="form-control" placeholder="Enter your email" @bind-Value="loginClass.Email" />
                    </div>
                    <ValidationMessage For="@(() => loginClass.Email)" class="text-danger small" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock-fill"></i></span>
                        <InputText id="password" class="form-control" placeholder="Enter your password" type="@passwordInputType" @bind-Value="loginClass.Password" />
                        <button type="button" class="btn btn-outline-secondary" title="@PasswordToggleTitle" @onclick="TogglePassword">
                            <i class="bi @(isPasswordVisible ? "bi-eye-slash" : "bi-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => loginClass.Password)" class="text-danger small" />
                </div>

                <div class="d-grid mt-4">
                    <button class="btn btn-primary btn-animated" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        }
                        Login
                    </button>
                </div>

                <div class="d-flex justify-content-between mt-3">
                    <a href="/register">üìù Register</a>
                </div>
            </EditForm>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert @(loginSuccess ? "alert-success" : "alert-danger") mt-3 mb-0">@Message</div>
            }
        </div>
    </div>
</div>

@code {
    private LoginClass loginClass = new();
    private string? Message;
    private bool loginSuccess = false;
    private bool isSubmitting = false;

    private bool isPasswordVisible = false;
    private string passwordInputType => isPasswordVisible ? "text" : "password";
    private string PasswordToggleTitle => isPasswordVisible ? "Hide password" : "Show password";

    private void TogglePassword()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private async Task HandleLogin()
    {
        isSubmitting = true;
        Message = null;

        await Task.Delay(800); // ‡∏à‡∏≥‡∏•‡∏≠‡∏á delay

        if (loginClass.Email == "admin@example.com" && loginClass.Password == "1234")
        {
            loginSuccess = true;
            Message = "‚úÖ Login successful!";
            Navigation.NavigateTo("/home");
        }
        else
        {
            loginSuccess = false;
            Message = "‚ùå Invalid credentials.";
        }

        isSubmitting = false;
    }
}
